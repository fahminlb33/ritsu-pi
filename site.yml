---
- name: Ritsu-pi Project
  hosts: ritsu_pi
  gather_facts: true
  vars_files:
    - secrets.yml
  vars:
    # Location where configuration files be stored.
    # Note: ALWAYS USE ABSOLUTE PATH
    config_root: /home/ramiel/ritsu-pi

    # Timezone
    timezone: Asia/Jakarta

    # Flame dashboard
    server_hostname: 10.20.20.101

    # Docker
    docker_network:
      subnet: "172.18.0.0/16"
      gateway: "172.18.0.1"
  pre_tasks:
    - name: Include common tasks
      ansible.builtin.import_tasks: tasks/main.yml
  roles:
    # ===> networking
    - role: adblock
      tags: [networking, security, adblock, dnscrypt, pihole]
      vars:
        adblock_state: present
        adblock_config_dir: "{{ config_root }}/adblock"

        adblock_dnscrypt:
          image: klutchell/dnscrypt-proxy:v2.1.12
          bind:
          # must be in the same subnet as the Docker network
            ip: "172.18.1.100"
          upstream:
            - cloudflare
            - google

        adblock_pihole:
          image: pihole/pihole:2025.08.0
          port: 8001
          port_https: 8301
          password: "{{ pihole_password }}"

    - role: downloader
      tags: [networking, security, vpn, gluetun]
      vars:
        downloader_state: present
        downloader_config_dir: "{{ config_root }}/downloader"

        # VPN
        downloader_gluetun:
          image: qmcgaw/gluetun:v3.40.0
          env:
            TZ: "{{ timezone }}"
            SERVER_COUNTRIES: "Canada"
            VPN_TYPE: "wireguard"
            VPN_PORT_FORWARDING: "on"
            VPN_SERVICE_PROVIDER: "protonvpn"
            VPN_PORT_FORWARDING_PROVIDER: "protonvpn"
            PORT_FORWARD_ONLY: "on"
            WIREGUARD_PRIVATE_KEY: "{{ protonvpn_wireguard_private_key }}"
            FIREWALL_VPN_INPUT_PORTS: "6881"

        # Downloaders
        downloader_qbittorrent:
          image: lscr.io/linuxserver/qbittorrent:5.1.2
          port: 8004
          download_dir: "/mnt/pool/downloads"

        downloader_sabnzbd:
          state: absent
          image: lscr.io/linuxserver/sabnzbd:4.5.3
          port: 8005
          download_dir_complete: "/mnt/pool/downloads"
          download_dir_incomplete: "/mnt/pool/downloads"

        downloader_jdownloader:
          image: jlesage/jdownloader-2:v25.07.2
          download_dir: "/mnt/pool/downloads"
          ports:
            vpn: 13001
            novpn: 13002
          myjd:
            email: "{{ jdownloader_myjd_email }}"
            password: "{{ jdownloader_myjd_password }}"
            device: "ramiel"

    # ===> media server
    - role: arr_stack
      tags: [networking, security, vpn, gluetun]
      vars:
        arr_stack_state: present
        arr_stack_config_dir: "{{ config_root }}/arr-stack"
        arr_stack_media_dir: /mnt/pool/media

        arr_stack_prowlarr:
          image: lscr.io/linuxserver/prowlarr:2.0.5
          port: 8201

        arr_stack_lidarr:
          image: lscr.io/linuxserver/lidarr:2.13.3
          port: 8202

        arr_stack_sonarr:
          image: lscr.io/linuxserver/sonarr:4.0.15
          port: 8203

        arr_stack_radarr:
          image: lscr.io/linuxserver/radarr:5.26.2
          port: 8204

        arr_stack_bazarr:
          image: lscr.io/linuxserver/bazarr:1.5.2
          port: 8205

    - role: jellyfin
      tags: [media, jellyfin]
      vars:
        jellyfin_state: present
        jellyfin_image: jellyfin/jellyfin:10.9.11
        jellyfin_port: 8002
        jellyfin_media_dir: /mnt/pool/media

    - role: immich
      tags: [networking, security, pihole]
      vars:
        immich_state: present
        immich_port: 8003

        immich_config_dir: "{{ config_root }}/immich"
        immich_upload_dir: /mnt/pool/photos

        immich_images:
          server: ghcr.io/immich-app/immich-server:v1.140.1
          ml: ghcr.io/immich-app/immich-machine-learning:v1.140.1
          postgres: ghcr.io/immich-app/postgres:14-vectorchord0.4.3-pgvectors0.2.0
          redis: valkey/valkey:8

        immich_hwaccel:
          transcoding: quicksync
          ml: openvino

        immich_db:
          name: immich
          username: "{{ immich_db_username }}"
          password: "{{ immich_db_password }}"
          storage_type: HDD

    # ===> monitoring
    - role: monitoring
      tags: [monitoring, prometheus]
      vars:
        monitoring_state: present
        monitoring_config_dir: "{{ config_root }}/monitoring"

        monitoring_portainer:
          state: present
          image: portainer/portainer-ce:2.33.1
          port: 8306
          port_https: 8006

        monitoring_grafana:
          state: present
          image: grafana/grafana:12.1.1-ubuntu
          port: 8007
          user:
            username: "{{ grafana_username }}"
            password: "{{ grafana_password }}"
            allow_signup: false

        monitoring_prometheus:
          state: present
          image: prom/prometheus:v3.5.0
          port: 8008
          scrape_interval: 15s
          retention:
            time: 2y
            size: 100GB
          remote_write:
            enabled: true
            url: http://vector:9090
          extra_config:
            - job_name: immich_api
              static_configs:
                - targets: ['immich-server:8081']
            - job_name: immich_microservices
              static_configs:
                - targets: ['immich-server:8082']

        monitoring_vector:
          state: present
          image: timberio/vector:0.49.0-debian
          port: 8009
          remote_write:
            port: 9090
            logs_path: /mnt/pool/prometheus-archive

        monitoring_exporters:
          node:
            state: present
            image: prom/node-exporter:v1.9.1
            port: 8101

          cadvisor:
            state: present
            image: gcr.io/cadvisor/cadvisor:v0.52.0
            port: 8102

          blackbox:
            state: present
            image: prom/blackbox-exporter:v0.27.0
            port: 8103
            ping_hosts:
              - https://www.google.com
              - https://www.github.com

          speedtest:
            state: present
            image: danopstech/speedtest_exporter:v0.0.5
            port: 8104
            # Configure the sample_interval to limit the number of checks interval because
            # the speed test will consume a considerable amount of bandwidth.
            scrape_interval: 1h
            # https://github.com/danopstech/speedtest_exporter

          mikrotik:
            state: present
            image: ghcr.io/akpw/mktxp:1.2.12
            port: 8105
            # Mikrotik router host
            router:
              host: 10.20.20.1
              port: 8728
            # Mikrotik user with API access
            user:
              username: "{{ mktxp_username }}"
              password: "{{ mktxp_password }}"

          apcusbd:
            state: present
            image: iodeveloper/prom-apcupsd-exporter:1.0.1
            port: 8106
            # https://grafana.com/grafana/dashboards/19329-apc-ups/

          smartctl:
            state: present
            image: prometheuscommunity/smartctl-exporter:v0.14.0
            port: 8107

    - role: dashboard
      tags: [common, dashboard]
      vars:
        dashboard_state: present
        dashboard_image: pawelmalak/flame:multiarch2.3.1
        dashboard_config_dir: "{{ config_root }}/dashboard"
        dashboard_password: "{{ dashboard_admin_password }}"

    # ==> AI/ML tools
    - role: mlflow
      tags: [monitoring, database, mlflow]
      vars:
        mlflow_state: present
        mlflow_image: ghcr.io/mlflow/mlflow:v3.3.2
        mlflow_port: 8010
        mlflow_config_dir: "{{ config_root }}/mlflow"

    # ==> databases
    - role: postgresql
      tags: [database, postgresql]
      vars:
        postgresql_major_version: 17
        postgresql_extensions:
          pg_search:
            version: "0.18.0"
          vectorchord:
            version: "0.5.0"
      become: true

    # ==> file sharing
    - role: samba
      tags: [file, media, share, samba]
      vars:
        # SMB user
        samba_user:
          group: smbusers
          username: "{{ samba_user_username }}"
          password: "{{ samba_user_password }}"

        # directories to share
        samba_mount_points:
          - name: ramiel
            path: /mnt/pool
            writeable: true
            browsable: true
      become: true
